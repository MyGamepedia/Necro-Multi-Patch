"Games"
{
	"#default"
	{
		"Offsets"
		{
			"CMultiplayRules::FAllowFlashlight" // CMultiplayRules::FAllowFlashlight()
			{
				"windows"	"56"
				"linux"		"57"
			}
			
			"CBaseCombatWeapon::HandleFireOnEmpty"
			{
				"windows"	"283"
				"linux"		"284"
			}
			
			"CBlackMesaBaseDetonator::Detonate" //CBlackMesaBaseDetonator::DispatchExplodeSound
			{
				"windows"	"240"
				"linux"		"241"
			}
			
			"CBasePlayer::ForceRespawn" // void CBasePlayer::ForceRespawn(void)
			{
				"windows"	"347"
				"linux"		"348"
			}
			
			"CMultiplayRules::IsMultiplayer" // CMultiplayRules::IsMultiplayer()
			{
				"windows"	"34"
				"linux"		"35"
			}
			
			"CBasePickup::DoRespawn" // void CBasePickup::DoRespawn()
			{
				"windows"	"238"
				"linux"		"239"
			}
			
			"CBaseEntity::AcceptInput" // CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
			{
				"windows"	"39"
				"linux"		"40"
			}
			
			"CWeapon_Tau::ItemPostFrame" // CWeapon_Tau::ItemPostFrame()
			{
				"windows"	"279"
				"linux"		"280"
			}
			
			"CBaseCombatWeapon::AbortReload"
			{
				"windows"	"289"
				"linux"		"290"
			}
			
			"CBaseCombatWeapon::Reload"
			{
				"windows"	"290"
				"linux"		"291"
			}
			
			"CBaseCombatWeapon::FinishReload"
			{
				"windows"	"288"
				"linux"		"289"
			}
			
			"CBaseCombatWeapon::PrimaryAttack"
			{
				"windows"	"295"
				"linux"		"296"
			}
			
			"CBaseCombatWeapon::SecondaryAttack"
			{
				"windows"	"296"
				"linux"		"297"
			}
			
			"CBaseCombatWeapon::HasAnyAmmo"
			{
				"windows"	"263"
				"linux"		"264"
			}

			"CBaseCombatWeapon::Deploy"
			{
				"windows"	"268"
				"linux"		"269"
			}	
			
			"CBlackMesaBaseProjectile::Init"
			{
				"windows"	"237"
				"linux"		"238"
			}
			
			"CWeapon_Crossbow::FireBolt"
			{
				"windows"	"423"
				"linux"		"424"
			}
			
			//It is "const CUserCmd *cmd = player->GetCurrentUserCommand()" in orig code, W - 0xE14 (hex) L - 0xE1C (hex)
			"CBasePlayer::GetCurrentUserCommand"	//TODO: Give a better name ?
			{
				"linux"		"3612"	//WARNING: NEEDS TO BE TESTED ON A LINUX SERVER!!!
				"windows"	"3604"
			}
		}
		
		"Functions"
		{
			"CMultiplayRules::FAllowFlashlight"
			{
				"offset"	"CMultiplayRules::FAllowFlashlight"
				"hooktype"	"gamerules"
				"return"	"bool"
				"this"		"ignore"
			}
			
			"CMultiplayRules::IsMultiplayer"
			{
				"offset"	"CMultiplayRules::IsMultiplayer"
				"hooktype"	"gamerules"
				"return"	"bool"
				"this"		"ignore"
			}
			
			"CBlackMesaBaseWeaponIronSights::ToggleIronSights"
			{
				"signature"	"CBlackMesaBaseWeaponIronSights::ToggleIronSights"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBaseCombatWeapon::Precache"
			{
				"signature"	"CBaseCombatWeapon::Precache"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBaseCombatWeapon::PrimaryAttack"
			{
				"offset"	"CBaseCombatWeapon::PrimaryAttack"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBaseCombatWeapon::Deploy"
			{
				"offset"	"CBaseCombatWeapon::Deploy"
				"hooktype"	"entity"
				"return"	"bool"
				"this"		"entity"
			}
			
			"CBaseCombatWeapon::SecondaryAttack"
			{
				"offset"	"CBaseCombatWeapon::SecondaryAttack"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBaseCombatWeapon::HandleFireOnEmpty"
			{
				"offset"	"CBaseCombatWeapon::HandleFireOnEmpty"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBaseCombatWeapon::HasAnyAmmo"
			{
				"offset"	"CBaseCombatWeapon::HasAnyAmmo"
				"hooktype"	"entity"
				"return"	"bool"
				"this"		"entity"
			}
			
			"CBlackMesaBaseDetonator::Detonate"
			{
				"offset"	"CBlackMesaBaseDetonator::Detonate"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBlackMesaPlayer::GiveDefaultItems"
			{
				"signature"	"CBlackMesaPlayer::GiveDefaultItems"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBasePlayer::ForceRespawn"
			{
				"offset"	"CBasePlayer::ForceRespawn"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBaseEntity::AcceptInput"
			{
				"offset"	"CBaseEntity::AcceptInput"
				"hooktype"	"entity"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"szInputName"
					{
						"type"	"charptr"
					}
					"pActivator"
					{
						"type"	"int"
					}
					"pCaller"
					{
						"type"	"int"
					}
					"Value"
					{
						"type"	"object"
						"size"	"20"
						"flags"	"byval odtor octor oassignop"
					}
					"outputID"
					{
						"type"	"int"
					}
				}
			}
			
			"CWeapon_Tau::ItemPostFrame"
			{
				"offset"	"CWeapon_Tau::ItemPostFrame"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBaseCombatWeapon::Reload"
			{
				"offset"	"CBaseCombatWeapon::Reload"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBaseCombatWeapon::FinishReload" //CBaseCombatWeapon::FinishReload()
			{
				"offset"	"CBaseCombatWeapon::FinishReload"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			
			"CBaseCombatWeapon::DefaultReload" //bool CBaseCombatWeapon::DefaultReload( int iClipSize1, int iClipSize2, int iActivity )
			{
				"signature"	"CBaseCombatWeapon::DefaultReload"
				"callconv"	"thiscall"
				"return"	"int"
				"this"		"entity"
				"arguments"
				{
					"iMaxClip1"
					{
						"type"	"int"
					}
					"iMaxClip2"
					{
						"type"	"int"
					}
					"iActivity"
					{
						"type"	"int"
					}
				}
			}
			
			"CLagCompensationManager::StartLagCompensation"	//void CLagCompensationManager::StartLagCompensation( CBasePlayer *player, LagCompensationType lagCompensationType, const Vector& weaponPos, const QAngle &weaponAngles, float weaponRange )
			{
				"signature"		"CLagCompensationManager::StartLagCompensation"
				"callconv"		"thiscall"
				"return"		"void"
				"this"			"address"
				"arguments"
				{
					"CBasePlayer"
					{
						"type"		"cbaseentity"
					}
					"LagCompensationType"
					{
						"type"		"int"
					}
					"weaponPos"
					{
						"type"		"vectorptr"
					}
					"weaponAngles"
					{
						"type"		"vectorptr"
					}
					"weaponRange"
					{
						"type"		"float"
					}
				}
			}
			
			
//			"CBaseCombatWeapon::Reload" //bool CBaseCombatWeapon::Reload( void ), NOTE: in Source SDK it's bool, while Ghidra shows void for Black Mesa, for Windows also show fastcall
//			{
//				"signature"	"CBaseCombatWeapon::Reload"
//				"callconv"	"thiscall"
//				"return"	"int"
//				"this"		"entity"
//			}
			
			
			"CBlackMesaBaseProjectile::Init" //void CBlackMesaBaseProjectile::Init(Vector const&, Vector const&, CBaseCombatCharacter*)
			{
				"offset"	"CBlackMesaBaseProjectile::Init"
				"callconv"	"thiscall"
				"return"	"int"
				"this"		"entity"
				"arguments"
				{
					"iVector1"
					{
						"type"	"vectorptr"
					}
					
					"iVector2"
					{
						"type"	"vectorptr"
					}
					
					"hBaseCombatCharacter"
					{
						"type"	"int"
					}
				}
			}
			
			"CWeapon_Crossbow::FireBolt" //bool CWeapon_Crossbow::FireBolt(bool)
			{
				"offset"	"CWeapon_Crossbow::FireBolt"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"bUnknown"
					{
						"type"	"bool"
					}
				}
			}
		}
		"Signatures"
		{
			"CBlackMesaPlayer::GiveDefaultItems"
			{
				"windows"	"\x53\x56\x57\x8B\xF9\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x01\x8B\x80\x88\x00\x00\x00\xFF\xD0\x84\xC0\x74\x13\x8B\x07\x8B\xCF\x8B\x80\xB8\x07\x00\x00\xFF\xD0\x84\xC0\x0F\x94\xC3\xEB\x02\xB3\x01\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x01\x8B\x80\x88\x00\x00\x00\xFF\xD0\x84\xC0"
				"linux"		"@_ZN16CBlackMesaPlayer16GiveDefaultItemsEv"
			}
			
			"CBlackMesaBaseWeaponIronSights::ToggleIronSights"
			{
				"windows"	"\x55\x8B\xEC\x83\xEC\x14\x56\x57\x8B\xF9\x2A\x2A\x2A\x2A\x2A\x8B\xF0\x89\x75\xEC\x85\xF6\x2A\x2A\x5F\x32\xC0\x5E\x8B"
				"linux"		"@_ZN30CBlackMesaBaseWeaponIronSights16ToggleIronSightsEv"
			}
			
			"CBaseCombatWeapon::Precache"
			{
				"windows"	"\x55\x8B\xEC\x51\x53\x56\x57\x8B\xF9\x83\xBF\xDC\x04\x00\x00\xFF\x8D\x9F\xDC\x04\x00\x00\x74\x2E\x80\xBB\x78\xFB\xFF\xFF\x00\x8D\x8B\x24\xFB\xFF\xFF\x74\x06\x80\x49\x58\x01\xEB\x13\x8B\x51\x18\x85\xD2\x74\x0C\x8B\xC3\x2B\xC1\x8B\x2A\x2A\x2A\x2A\xDB\xF4\xFF"
				"linux"		"@_ZN17CBaseCombatWeapon8PrecacheEv"
			}
			
			//Use Cheat Engine to find by finding m_bReload via value scan
			"CBaseCombatWeapon::DefaultReload"
			{
				"windows"	"\x55\x8B\xEC\x51\x53\x57\x8B\xF9\x8B\x8F\x94\x04\x00\x00\x83\xF9\xFF\x74\x43\x8B\x15\x2A\x2A\x2A\x2A\x8B\xC1\x25\xFF\x1F\x00\x00\xC1\xE9\x0D\xC1\xE0\x2A\x2A\x2A\x2A\x08\x75\x2A\x2A\x2A\x2A\x04\x85\xC9\x74\x22\x8B\x01\xFF\x90\x38\x01\x00\x00\x8B\xD8\x85\xDB"
				"linux"		"@_ZN17CBaseCombatWeapon13DefaultReloadEiii"
			}
			
			//Use "Function Call Trees: CBaseCombatWeapon::DefaultReload" to find this func
			"CBaseCombatWeapon::Reload"
			{
				"windows"	"\x56\x8B\xF1\x8B\x06\xFF\x90\x8C\x04\x00\x00\x50\x8B\x06\x8B\xCE\xFF\x90\x40\x05\x00\x00\x50\x8B\x06\x8B\xCE\xFF\x90\x3C\x05\x00\x00\x50\x8B\xCE\xE8\xE7\xCA\xFF\xFF\x5E\xC3"
				"linux"		"@__ZN17CBaseCombatWeapon6ReloadEv"
			}
			
			//Seach by string "StartLagCompensation"
			"CLagCompensationManager::StartLagCompensation"
			{
				"windows"	"\x55\x8B\xEC\x83\xEC\x40\x33\xD2\x89\x4D\xF4\x56\x57\x33\xFF\x89\x55\xF8\x8D\x71\x04\x89\x55\xC0\x89\x55\xC4\x89\x55\xC8\x89\x7D\xCC\xBF\xFF\xFF\x00\x00\x89\x55\xD0\x2A\x2A\x2A\x2A\x89\x75\xE8\x66\x3B\xD7\x74\x15\x8B\x46\x04\x0F\xB7\xCA\x03\xC9\x0F\xB7\x04"
				"linux"		"@_ZN23CLagCompensationManager20StartLagCompensationEP11CBasePlayer19LagCompensationTypeRK6VectorRK6QAnglef"
			}
			
			"CEnvLaserDot::Create"
			{
				"library"   "server"
				"windows"	"\x55\x8B\xEC\x83\xEC\x18\x56\x6A\x00\x2A\x2A\x2A\x2A\x11\xFF\x75\x08\x68\x2A\x2A\x2A\x2A\xE8\x05\x99\xDF\xFF\x8B\x2A\x2A\x2A\x2A\x85\xF6\x0F\x84\x82\x00\x00\x00\x6A\x00\x6A\x00\x8B\xCE\xE8\xBD\x3F\xE0\xFF\x0F\xB7\x86\x88\x01\x00\x00\x8D\x8E\x4C\x01\x00\x00"
				"linux"		"@_ZN12CEnvLaserDot6CreateERK6VectorP11CBaseEntity"
			}
		}                                        
	}
}